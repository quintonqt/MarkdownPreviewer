{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","App","props","state","input","defaultText","handleChange","bind","event","this","setState","target","value","className","id","onChange","text","React","Component","Editor","Previewer","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPAEIA,G,MAASC,EAAQ,KAEfC,E,kDACL,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,MAAOC,GAGR,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANF,E,yDASNC,GACZC,KAAKC,SAAS,CACbN,MAAOI,EAAMG,OAAOC,U,+BAIrB,OACC,yBAAKC,UAAU,WACd,yBAAKC,GAAG,kBACP,wBAAIA,GAAG,SAAP,4BACA,wBAAID,UAAU,gBAAd,2BACA,kBAAC,EAAD,CAAQD,MAAOH,KAAKN,MAAMC,MAAOW,SAAUN,KAAKH,eAChD,wBAAIO,UAAU,gBAAd,4BAAuD,MAExD,yBAAKC,GAAG,mBACP,kBAAC,EAAD,CAAWE,KAAMjB,EAAOU,KAAKN,MAAMC,e,GAzBtBa,IAAMC,WAgClBC,EAAS,SAACjB,GACf,OACC,8BAAUY,GAAG,SAASC,SAAUb,EAAMa,UACpCb,EAAMU,QAKJQ,EAAY,SAAClB,GAClB,OACC,yBAAKY,GAAG,UAAUO,wBAAyB,CAAEC,OAAQpB,EAAMc,SAI9Cf,IAETI,EAAW,mcCxCGkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dede6127.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nlet marked = require('marked');\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinput: defaultText,\n\t\t};\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\n\thandleChange(event) {\n\t\tthis.setState({\n\t\t\tinput: event.target.value,\n\t\t});\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"wrapper\">\n\t\t\t\t<div id=\"left-container\">\n\t\t\t\t\t<h1 id=\"title\">React Markdown Previewer</h1>\n\t\t\t\t\t<h2 className=\"instructions\">Make Your Edits Here...</h2>\n\t\t\t\t\t<Editor value={this.state.input} onChange={this.handleChange} />\n\t\t\t\t\t<h2 className=\"instructions\">See your changes there --{'>'}</h2>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"right-container\">\n\t\t\t\t\t<Previewer text={marked(this.state.input)} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst Editor = (props) => {\n\treturn (\n\t\t<textarea id=\"editor\" onChange={props.onChange}>\n\t\t\t{props.value}\n\t\t</textarea>\n\t);\n};\n\nconst Previewer = (props) => {\n\treturn (\n\t\t<div id=\"preview\" dangerouslySetInnerHTML={{ __html: props.text }}></div>\n\t);\n};\n\nexport default App;\n\nconst defaultText = `# Main Header\n\n## This is a sub-header\n\nCheck out my website [here](https://quintonqt.github.io)\n\n\\`Here is some pseudocode inline\\`\n\nHere is a block of code:\n\\`\\`\\`\n\t<div>\n\t\t<Editor value={this.state.input} />\n\t\t<Previewer text={marked(this.state.input)} />\n\t</div>\n\\`\\`\\`\n\n* Nani?\n\n> This is a block quote. Just add the greater than symbol in front \nof whatever you want to write!\n\n![React Logo](./logo192.png)\n\n**BE BOLD**\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}